---
# This playbook contains common plays that will be run on all nodes.
- debug: msg="Version {{ ansible_distribution }} {{ ansible_distribution_version }}"

- name: Fail if not a new release of Ubuntu
  fail:
    msg: "{{ ansible_distribution_version }} is not an acceptable version of Ubuntu for this role"
  when: ansible_distribution_version|version_compare(12.04, '<') or ansible_distribution_version|version_compare(12.10, '=')

- name: Stop docker
  service:
    name: docker
    state: stopped

#- name:  Uninstall dkms packages
#  apt: >
#    pkg={{ item }}
#    state=absent
#    purge=yes
#    force=yes
#  sudo : yes
#  with_items:
#    - dkms
#    - zfs-dkms
#    - spl-dkms
#    - ubuntu-zfs
#    - virtualbox*
#sudo apt-get autoremove 'virtualbox*'

#sudo apt-get install --no-install-recommends linux-image-generic linux-headers-generic
#- name: Upgrade kernel
#  apt: pkg={{ item }} state=present update_cache=yes
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
#  with_items:
#     - linux-image-generic
#     - linux-headers-generic

- name: Install ZFS repo
  apt_repository: repo={{ item }} update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  with_items:
     - ppa:zfs-native/stable
#     - ppa:zfs-native/grub

#TODO see https://docs.docker.com/engine/userguide/storagedriver/zfs-driver/
- name: Install ZFS
  apt: pkg={{ item }} state=present update_cache=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  with_items:
     - software-properties-common
     - debootstrap
     - zfs-initramfs
     - zfsutils
     - ubuntu-zfs
     #- zfs-fuse
     - grub2-common
     - grub-pc
     - spl
     - spl-dkms
     - zfs-dkms
  register: package_result

- name: stop postgresql
  service: name=postgresql state=stopped
  sudo: yes

#- name: Uninstall postgresql
#  apt: >
#    pkg={{ item }}
#    state=absent
#    purge=yes
#    force=yes
#    update_cache=yes
#    autoremove=yes
#  sudo: yes
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
#  with_items:
#     - postgresql-9.1
#     - postgresql-9.2
#     - postgresql-9.3
#     - postgresql-9.4
#     - postgresql-9.5

- name: Upgrade safe
  apt: upgrade=safe update_cache=yes dpkg_options='force-confold,force-confdef' force=yes install_recommends=yes
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Reboot instance
  command: /sbin/shutdown -r now
  register: reboot_result
  when: "package_result|changed and reboot_enabled"

- name: Wait for instance to come online (10 minute timeout)
  sudo: false
  local_action:
    module: wait_for
    host: "{{ ansible_ssh_host|default(inventory_hostname) }}"
    port: "{{ ansible_ssh_port|default(ssh_port) }}"
    delay: 30
    timeout: 600
    state: started
  when: "package_result|changed and reboot_enabled"

- name: Check dkms
  command: /usr/sbin/dkms status
  register: dkms_result
  when: "package_result|changed and not reboot_enabled"

#sudo dkms remove -m zfs -v 0.6.2 --all
#sudo dkms remove -m spl -v 3.13.0-46-generic --all

- name: Load the zfs module
  command: /sbin/modprobe zfs
  register: modprobe_result
  when: "package_result|changed and not reboot_enabled"
#
#sudo modprobe zfs
#Verify that it loaded correctly.
#lsmod | grep zfs

- name: Create a zpool for docker
  command: zpool create -f {{ zfs_docker_pool }} /dev/sdb
#-O compression=gzip
#  when: reboot_enabled
  sudo: yes

#sudo zfs create

- name: Create a zfs file system for docker
  command: zpool create -o mountpoint={{ zfs_docker_directory }} {{ zfs_docker_pool }}/docker
#-O compression=gzip
#  when: reboot_enabled
  sudo: yes

#TODO check docker
#sudo docker info

- name: Create a zfs file system
  action: zfs name={{ zfs_pool }}/home state=present
  when: reboot_enabled

- name: Create a zfs file system with quota of 10GiB and visible snapdir
  action: zfs name={{ zfs_pool }}/jenkins quota='10G' snapdir=visible state=present
  when: reboot_enabled

- name: Crate zfs snapshot of the above file system
  action: zfs name={{ zfs_pool }}/jenkins@initial-snapshot state=present
  when: reboot_enabled

- name: Create zfs volume named log with a size of 10MiB
  action: zfs name={{ zfs_pool }}/log volsize=10M state=present
  when: reboot_enabled

#- name: Removes snapshot of rpool/oldfs
#  action: zfs name={{ zfs_pool }}/oldfs@oldsnapshot state=absent

#- name: Removes file system rpool/oldfs
#  action: zfs name={{ zfs_pool }}/oldfs state=absent
